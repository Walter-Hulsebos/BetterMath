//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using Unity.IL2CPP.CompilerServices;

#pragma warning disable 0660, 0661

namespace CGTK.Utilities.BetterMath
{
    /// <summary>A 3x3 matrix of floats.</summary>
    [System.Serializable]
    [Il2CppEagerStaticClassConstruction]
    public partial struct F32x3x3 : System.IEquatable<F32x3x3>, IFormattable
    {
        /// <summary>Column 0 of the matrix.</summary>
        public F32x3 c0;
        /// <summary>Column 1 of the matrix.</summary>
        public F32x3 c1;
        /// <summary>Column 2 of the matrix.</summary>
        public F32x3 c2;

        /// <summary>F32x3x3 identity transform.</summary>
        public static readonly F32x3x3 identity = new F32x3x3(1.0f, 0.0f, 0.0f,   0.0f, 1.0f, 0.0f,   0.0f, 0.0f, 1.0f);

        /// <summary>F32x3x3 zero value.</summary>
        public static readonly F32x3x3 zero;

        /// <summary>Constructs a F32x3x3 matrix from three F32x3 vectors.</summary>
        /// <param name="c0">The matrix column c0 will be set to this value.</param>
        /// <param name="c1">The matrix column c1 will be set to this value.</param>
        /// <param name="c2">The matrix column c2 will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x3x3(F32x3 c0, F32x3 c1, F32x3 c2)
        {
            this.c0 = c0;
            this.c1 = c1;
            this.c2 = c2;
        }

        /// <summary>Constructs a F32x3x3 matrix from 9 float values given in row-major order.</summary>
        /// <param name="m00">The matrix at row 0, column 0 will be set to this value.</param>
        /// <param name="m01">The matrix at row 0, column 1 will be set to this value.</param>
        /// <param name="m02">The matrix at row 0, column 2 will be set to this value.</param>
        /// <param name="m10">The matrix at row 1, column 0 will be set to this value.</param>
        /// <param name="m11">The matrix at row 1, column 1 will be set to this value.</param>
        /// <param name="m12">The matrix at row 1, column 2 will be set to this value.</param>
        /// <param name="m20">The matrix at row 2, column 0 will be set to this value.</param>
        /// <param name="m21">The matrix at row 2, column 1 will be set to this value.</param>
        /// <param name="m22">The matrix at row 2, column 2 will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x3x3(float m00, float m01, float m02,
                        float m10, float m11, float m12,
                        float m20, float m21, float m22)
        {
            this.c0 = new F32x3(m00, m10, m20);
            this.c1 = new F32x3(m01, m11, m21);
            this.c2 = new F32x3(m02, m12, m22);
        }

        /// <summary>Constructs a F32x3x3 matrix from a single float value by assigning it to every component.</summary>
        /// <param name="v">float to convert to F32x3x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x3x3(float v)
        {
            this.c0 = v;
            this.c1 = v;
            this.c2 = v;
        }

        /// <summary>Constructs a F32x3x3 matrix from a single bool value by converting it to float and assigning it to every component.</summary>
        /// <param name="v">bool to convert to F32x3x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x3x3(bool v)
        {
            this.c0 = Maths.select(new F32x3(0.0f), new F32x3(1.0f), v);
            this.c1 = Maths.select(new F32x3(0.0f), new F32x3(1.0f), v);
            this.c2 = Maths.select(new F32x3(0.0f), new F32x3(1.0f), v);
        }

        /// <summary>Constructs a F32x3x3 matrix from a Boolx3x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Boolx3x3 to convert to F32x3x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x3x3(Boolx3x3 v)
        {
            this.c0 = Maths.select(new F32x3(0.0f), new F32x3(1.0f), v.c0);
            this.c1 = Maths.select(new F32x3(0.0f), new F32x3(1.0f), v.c1);
            this.c2 = Maths.select(new F32x3(0.0f), new F32x3(1.0f), v.c2);
        }

        /// <summary>Constructs a F32x3x3 matrix from a single int value by converting it to float and assigning it to every component.</summary>
        /// <param name="v">int to convert to F32x3x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x3x3(int v)
        {
            this.c0 = v;
            this.c1 = v;
            this.c2 = v;
        }

        /// <summary>Constructs a F32x3x3 matrix from a I32x3x3 matrix by componentwise conversion.</summary>
        /// <param name="v">I32x3x3 to convert to F32x3x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x3x3(I32x3x3 v)
        {
            this.c0 = v.c0;
            this.c1 = v.c1;
            this.c2 = v.c2;
        }

        /// <summary>Constructs a F32x3x3 matrix from a single uint value by converting it to float and assigning it to every component.</summary>
        /// <param name="v">uint to convert to F32x3x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x3x3(uint v)
        {
            this.c0 = v;
            this.c1 = v;
            this.c2 = v;
        }

        /// <summary>Constructs a F32x3x3 matrix from a U32x3x3 matrix by componentwise conversion.</summary>
        /// <param name="v">U32x3x3 to convert to F32x3x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x3x3(U32x3x3 v)
        {
            this.c0 = v.c0;
            this.c1 = v.c1;
            this.c2 = v.c2;
        }

        /// <summary>Constructs a F32x3x3 matrix from a single double value by converting it to float and assigning it to every component.</summary>
        /// <param name="v">double to convert to F32x3x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x3x3(double v)
        {
            this.c0 = (F32x3)v;
            this.c1 = (F32x3)v;
            this.c2 = (F32x3)v;
        }

        /// <summary>Constructs a F32x3x3 matrix from a F64x3x3 matrix by componentwise conversion.</summary>
        /// <param name="v">F64x3x3 to convert to F32x3x3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x3x3(F64x3x3 v)
        {
            this.c0 = (F32x3)v.c0;
            this.c1 = (F32x3)v.c1;
            this.c2 = (F32x3)v.c2;
        }


        /// <summary>Implicitly converts a single float value to a F32x3x3 matrix by assigning it to every component.</summary>
        /// <param name="v">float to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F32x3x3(float v) { return new F32x3x3(v); }

        /// <summary>Explicitly converts a single bool value to a F32x3x3 matrix by converting it to float and assigning it to every component.</summary>
        /// <param name="v">bool to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator F32x3x3(bool v) { return new F32x3x3(v); }

        /// <summary>Explicitly converts a Boolx3x3 matrix to a F32x3x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Boolx3x3 to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator F32x3x3(Boolx3x3 v) { return new F32x3x3(v); }

        /// <summary>Implicitly converts a single int value to a F32x3x3 matrix by converting it to float and assigning it to every component.</summary>
        /// <param name="v">int to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F32x3x3(int v) { return new F32x3x3(v); }

        /// <summary>Implicitly converts a I32x3x3 matrix to a F32x3x3 matrix by componentwise conversion.</summary>
        /// <param name="v">I32x3x3 to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F32x3x3(I32x3x3 v) { return new F32x3x3(v); }

        /// <summary>Implicitly converts a single uint value to a F32x3x3 matrix by converting it to float and assigning it to every component.</summary>
        /// <param name="v">uint to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F32x3x3(uint v) { return new F32x3x3(v); }

        /// <summary>Implicitly converts a U32x3x3 matrix to a F32x3x3 matrix by componentwise conversion.</summary>
        /// <param name="v">U32x3x3 to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F32x3x3(U32x3x3 v) { return new F32x3x3(v); }

        /// <summary>Explicitly converts a single double value to a F32x3x3 matrix by converting it to float and assigning it to every component.</summary>
        /// <param name="v">double to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator F32x3x3(double v) { return new F32x3x3(v); }

        /// <summary>Explicitly converts a F64x3x3 matrix to a F32x3x3 matrix by componentwise conversion.</summary>
        /// <param name="v">F64x3x3 to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator F32x3x3(F64x3x3 v) { return new F32x3x3(v); }


        /// <summary>Returns the result of a componentwise multiplication operation on two F32x3x3 matrices.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise multiplication.</param>
        /// <returns>F32x3x3 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator * (F32x3x3 lhs, F32x3x3 rhs) { return new F32x3x3 (lhs.c0 * rhs.c0, lhs.c1 * rhs.c1, lhs.c2 * rhs.c2); }

        /// <summary>Returns the result of a componentwise multiplication operation on a F32x3x3 matrix and a float value.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise multiplication.</param>
        /// <returns>F32x3x3 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator * (F32x3x3 lhs, float rhs) { return new F32x3x3 (lhs.c0 * rhs, lhs.c1 * rhs, lhs.c2 * rhs); }

        /// <summary>Returns the result of a componentwise multiplication operation on a float value and a F32x3x3 matrix.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise multiplication.</param>
        /// <returns>F32x3x3 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator * (float lhs, F32x3x3 rhs) { return new F32x3x3 (lhs * rhs.c0, lhs * rhs.c1, lhs * rhs.c2); }


        /// <summary>Returns the result of a componentwise addition operation on two F32x3x3 matrices.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise addition.</param>
        /// <returns>F32x3x3 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator + (F32x3x3 lhs, F32x3x3 rhs) { return new F32x3x3 (lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2); }

        /// <summary>Returns the result of a componentwise addition operation on a F32x3x3 matrix and a float value.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise addition.</param>
        /// <returns>F32x3x3 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator + (F32x3x3 lhs, float rhs) { return new F32x3x3 (lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs); }

        /// <summary>Returns the result of a componentwise addition operation on a float value and a F32x3x3 matrix.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise addition.</param>
        /// <returns>F32x3x3 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator + (float lhs, F32x3x3 rhs) { return new F32x3x3 (lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2); }


        /// <summary>Returns the result of a componentwise subtraction operation on two F32x3x3 matrices.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise subtraction.</param>
        /// <returns>F32x3x3 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator - (F32x3x3 lhs, F32x3x3 rhs) { return new F32x3x3 (lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2); }

        /// <summary>Returns the result of a componentwise subtraction operation on a F32x3x3 matrix and a float value.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise subtraction.</param>
        /// <returns>F32x3x3 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator - (F32x3x3 lhs, float rhs) { return new F32x3x3 (lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs); }

        /// <summary>Returns the result of a componentwise subtraction operation on a float value and a F32x3x3 matrix.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise subtraction.</param>
        /// <returns>F32x3x3 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator - (float lhs, F32x3x3 rhs) { return new F32x3x3 (lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2); }


        /// <summary>Returns the result of a componentwise division operation on two F32x3x3 matrices.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise division.</param>
        /// <returns>F32x3x3 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator / (F32x3x3 lhs, F32x3x3 rhs) { return new F32x3x3 (lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2); }

        /// <summary>Returns the result of a componentwise division operation on a F32x3x3 matrix and a float value.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise division.</param>
        /// <returns>F32x3x3 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator / (F32x3x3 lhs, float rhs) { return new F32x3x3 (lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs); }

        /// <summary>Returns the result of a componentwise division operation on a float value and a F32x3x3 matrix.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise division.</param>
        /// <returns>F32x3x3 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator / (float lhs, F32x3x3 rhs) { return new F32x3x3 (lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2); }


        /// <summary>Returns the result of a componentwise modulus operation on two F32x3x3 matrices.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise modulus.</param>
        /// <returns>F32x3x3 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator % (F32x3x3 lhs, F32x3x3 rhs) { return new F32x3x3 (lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2); }

        /// <summary>Returns the result of a componentwise modulus operation on a F32x3x3 matrix and a float value.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise modulus.</param>
        /// <returns>F32x3x3 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator % (F32x3x3 lhs, float rhs) { return new F32x3x3 (lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs); }

        /// <summary>Returns the result of a componentwise modulus operation on a float value and a F32x3x3 matrix.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise modulus.</param>
        /// <returns>F32x3x3 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator % (float lhs, F32x3x3 rhs) { return new F32x3x3 (lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2); }


        /// <summary>Returns the result of a componentwise increment operation on a F32x3x3 matrix.</summary>
        /// <param name="val">Value to use when computing the componentwise increment.</param>
        /// <returns>F32x3x3 result of the componentwise increment.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator ++ (F32x3x3 val) { return new F32x3x3 (++val.c0, ++val.c1, ++val.c2); }


        /// <summary>Returns the result of a componentwise decrement operation on a F32x3x3 matrix.</summary>
        /// <param name="val">Value to use when computing the componentwise decrement.</param>
        /// <returns>F32x3x3 result of the componentwise decrement.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator -- (F32x3x3 val) { return new F32x3x3 (--val.c0, --val.c1, --val.c2); }


        /// <summary>Returns the result of a componentwise less than operation on two F32x3x3 matrices.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise less than.</param>
        /// <returns>Boolx3x3 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator < (F32x3x3 lhs, F32x3x3 rhs) { return new Boolx3x3 (lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2); }

        /// <summary>Returns the result of a componentwise less than operation on a F32x3x3 matrix and a float value.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise less than.</param>
        /// <returns>Boolx3x3 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator < (F32x3x3 lhs, float rhs) { return new Boolx3x3 (lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs); }

        /// <summary>Returns the result of a componentwise less than operation on a float value and a F32x3x3 matrix.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise less than.</param>
        /// <returns>Boolx3x3 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator < (float lhs, F32x3x3 rhs) { return new Boolx3x3 (lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2); }


        /// <summary>Returns the result of a componentwise less or equal operation on two F32x3x3 matrices.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise less or equal.</param>
        /// <returns>Boolx3x3 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator <= (F32x3x3 lhs, F32x3x3 rhs) { return new Boolx3x3 (lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2); }

        /// <summary>Returns the result of a componentwise less or equal operation on a F32x3x3 matrix and a float value.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise less or equal.</param>
        /// <returns>Boolx3x3 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator <= (F32x3x3 lhs, float rhs) { return new Boolx3x3 (lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs); }

        /// <summary>Returns the result of a componentwise less or equal operation on a float value and a F32x3x3 matrix.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise less or equal.</param>
        /// <returns>Boolx3x3 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator <= (float lhs, F32x3x3 rhs) { return new Boolx3x3 (lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2); }


        /// <summary>Returns the result of a componentwise greater than operation on two F32x3x3 matrices.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise greater than.</param>
        /// <returns>Boolx3x3 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator > (F32x3x3 lhs, F32x3x3 rhs) { return new Boolx3x3 (lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2); }

        /// <summary>Returns the result of a componentwise greater than operation on a F32x3x3 matrix and a float value.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise greater than.</param>
        /// <returns>Boolx3x3 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator > (F32x3x3 lhs, float rhs) { return new Boolx3x3 (lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs); }

        /// <summary>Returns the result of a componentwise greater than operation on a float value and a F32x3x3 matrix.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise greater than.</param>
        /// <returns>Boolx3x3 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator > (float lhs, F32x3x3 rhs) { return new Boolx3x3 (lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2); }


        /// <summary>Returns the result of a componentwise greater or equal operation on two F32x3x3 matrices.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise greater or equal.</param>
        /// <returns>Boolx3x3 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator >= (F32x3x3 lhs, F32x3x3 rhs) { return new Boolx3x3 (lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a F32x3x3 matrix and a float value.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise greater or equal.</param>
        /// <returns>Boolx3x3 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator >= (F32x3x3 lhs, float rhs) { return new Boolx3x3 (lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a float value and a F32x3x3 matrix.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise greater or equal.</param>
        /// <returns>Boolx3x3 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator >= (float lhs, F32x3x3 rhs) { return new Boolx3x3 (lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2); }


        /// <summary>Returns the result of a componentwise unary minus operation on a F32x3x3 matrix.</summary>
        /// <param name="val">Value to use when computing the componentwise unary minus.</param>
        /// <returns>F32x3x3 result of the componentwise unary minus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator - (F32x3x3 val) { return new F32x3x3 (-val.c0, -val.c1, -val.c2); }


        /// <summary>Returns the result of a componentwise unary plus operation on a F32x3x3 matrix.</summary>
        /// <param name="val">Value to use when computing the componentwise unary plus.</param>
        /// <returns>F32x3x3 result of the componentwise unary plus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 operator + (F32x3x3 val) { return new F32x3x3 (+val.c0, +val.c1, +val.c2); }


        /// <summary>Returns the result of a componentwise equality operation on two F32x3x3 matrices.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise equality.</param>
        /// <returns>Boolx3x3 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator == (F32x3x3 lhs, F32x3x3 rhs) { return new Boolx3x3 (lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2); }

        /// <summary>Returns the result of a componentwise equality operation on a F32x3x3 matrix and a float value.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise equality.</param>
        /// <returns>Boolx3x3 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator == (F32x3x3 lhs, float rhs) { return new Boolx3x3 (lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a float value and a F32x3x3 matrix.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise equality.</param>
        /// <returns>Boolx3x3 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator == (float lhs, F32x3x3 rhs) { return new Boolx3x3 (lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2); }


        /// <summary>Returns the result of a componentwise not equal operation on two F32x3x3 matrices.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise not equal.</param>
        /// <returns>Boolx3x3 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator != (F32x3x3 lhs, F32x3x3 rhs) { return new Boolx3x3 (lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2); }

        /// <summary>Returns the result of a componentwise not equal operation on a F32x3x3 matrix and a float value.</summary>
        /// <param name="lhs">Left hand side F32x3x3 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise not equal.</param>
        /// <returns>Boolx3x3 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator != (F32x3x3 lhs, float rhs) { return new Boolx3x3 (lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a float value and a F32x3x3 matrix.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side F32x3x3 to use to compute componentwise not equal.</param>
        /// <returns>Boolx3x3 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx3x3 operator != (float lhs, F32x3x3 rhs) { return new Boolx3x3 (lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2); }



        /// <summary>Returns the F32x3 element at a specified index.</summary>
        unsafe public ref F32x3 this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 3)
                    throw new System.ArgumentException("index must be between[0...2]");
#endif
                fixed (F32x3x3* array = &this) { return ref ((F32x3*)array)[index]; }
            }
        }

        /// <summary>Returns true if the F32x3x3 is equal to a given F32x3x3, false otherwise.</summary>
        /// <param name="rhs">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(F32x3x3 rhs) { return c0.Equals(rhs.c0) && c1.Equals(rhs.c1) && c2.Equals(rhs.c2); }

        /// <summary>Returns true if the F32x3x3 is equal to a given F32x3x3, false otherwise.</summary>
        /// <param name="o">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        public override bool Equals(object o) { return o is F32x3x3 converted && Equals(converted); }


        /// <summary>Returns a hash code for the F32x3x3.</summary>
        /// <returns>The computed hash code.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() { return (int)Maths.hash(this); }


        /// <summary>Returns a string representation of the F32x3x3.</summary>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("F32x3x3({0}f, {1}f, {2}f,  {3}f, {4}f, {5}f,  {6}f, {7}f, {8}f)", c0.x, c1.x, c2.x, c0.y, c1.y, c2.y, c0.z, c1.z, c2.z);
        }

        /// <summary>Returns a string representation of the F32x3x3 using a specified format and culture-specific format information.</summary>
        /// <param name="format">Format string to use during string formatting.</param>
        /// <param name="formatProvider">Format provider to use during string formatting.</param>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("F32x3x3({0}f, {1}f, {2}f,  {3}f, {4}f, {5}f,  {6}f, {7}f, {8}f)", c0.x.ToString(format, formatProvider), c1.x.ToString(format, formatProvider), c2.x.ToString(format, formatProvider), c0.y.ToString(format, formatProvider), c1.y.ToString(format, formatProvider), c2.y.ToString(format, formatProvider), c0.z.ToString(format, formatProvider), c1.z.ToString(format, formatProvider), c2.z.ToString(format, formatProvider));
        }

    }

    public static partial class Maths
    {
        /*
        /// <summary>Returns a F32x3x3 matrix constructed from three F32x3 vectors.</summary>
        /// <param name="c0">The matrix column c0 will be set to this value.</param>
        /// <param name="c1">The matrix column c1 will be set to this value.</param>
        /// <param name="c2">The matrix column c2 will be set to this value.</param>
        /// <returns>F32x3x3 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 new F32x3x3(F32x3 c0, F32x3 c1, F32x3 c2) { return new F32x3x3(c0, c1, c2); }

        /// <summary>Returns a F32x3x3 matrix constructed from from 9 float values given in row-major order.</summary>
        /// <param name="m00">The matrix at row 0, column 0 will be set to this value.</param>
        /// <param name="m01">The matrix at row 0, column 1 will be set to this value.</param>
        /// <param name="m02">The matrix at row 0, column 2 will be set to this value.</param>
        /// <param name="m10">The matrix at row 1, column 0 will be set to this value.</param>
        /// <param name="m11">The matrix at row 1, column 1 will be set to this value.</param>
        /// <param name="m12">The matrix at row 1, column 2 will be set to this value.</param>
        /// <param name="m20">The matrix at row 2, column 0 will be set to this value.</param>
        /// <param name="m21">The matrix at row 2, column 1 will be set to this value.</param>
        /// <param name="m22">The matrix at row 2, column 2 will be set to this value.</param>
        /// <returns>F32x3x3 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 new F32x3x3(float m00, float m01, float m02,
                                        float m10, float m11, float m12,
                                        float m20, float m21, float m22)
        {
            return new F32x3x3(m00, m01, m02,
                                m10, m11, m12,
                                m20, m21, m22);
        }

        /// <summary>Returns a F32x3x3 matrix constructed from a single float value by assigning it to every component.</summary>
        /// <param name="v">float to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 new F32x3x3(float v) { return new F32x3x3(v); }

        /// <summary>Returns a F32x3x3 matrix constructed from a single bool value by converting it to float and assigning it to every component.</summary>
        /// <param name="v">bool to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 new F32x3x3(bool v) { return new F32x3x3(v); }

        /// <summary>Return a F32x3x3 matrix constructed from a Boolx3x3 matrix by componentwise conversion.</summary>
        /// <param name="v">Boolx3x3 to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 new F32x3x3(Boolx3x3 v) { return new F32x3x3(v); }

        /// <summary>Returns a F32x3x3 matrix constructed from a single int value by converting it to float and assigning it to every component.</summary>
        /// <param name="v">int to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 new F32x3x3(int v) { return new F32x3x3(v); }

        /// <summary>Return a F32x3x3 matrix constructed from a I32x3x3 matrix by componentwise conversion.</summary>
        /// <param name="v">I32x3x3 to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 new F32x3x3(I32x3x3 v) { return new F32x3x3(v); }

        /// <summary>Returns a F32x3x3 matrix constructed from a single uint value by converting it to float and assigning it to every component.</summary>
        /// <param name="v">uint to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 new F32x3x3(uint v) { return new F32x3x3(v); }

        /// <summary>Return a F32x3x3 matrix constructed from a U32x3x3 matrix by componentwise conversion.</summary>
        /// <param name="v">U32x3x3 to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 new F32x3x3(U32x3x3 v) { return new F32x3x3(v); }

        /// <summary>Returns a F32x3x3 matrix constructed from a single double value by converting it to float and assigning it to every component.</summary>
        /// <param name="v">double to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 new F32x3x3(double v) { return new F32x3x3(v); }

        /// <summary>Return a F32x3x3 matrix constructed from a F64x3x3 matrix by componentwise conversion.</summary>
        /// <param name="v">F64x3x3 to convert to F32x3x3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 new F32x3x3(F64x3x3 v) { return new F32x3x3(v); }
        */

        /// <summary>Return the F32x3x3 transpose of a F32x3x3 matrix.</summary>
        /// <param name="v">Value to transpose.</param>
        /// <returns>Transposed value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3x3 transpose(F32x3x3 v)
        {
            return new F32x3x3(
                v.c0.x, v.c0.y, v.c0.z,
                v.c1.x, v.c1.y, v.c1.z,
                v.c2.x, v.c2.y, v.c2.z);
        }

        /// <summary>Returns the F32x3x3 full inverse of a F32x3x3 matrix.</summary>
        /// <param name="m">Matrix to invert.</param>
        /// <returns>The inverted matrix.</returns>
        public static F32x3x3 inverse(F32x3x3 m)
        {
            F32x3 c0 = m.c0;
            F32x3 c1 = m.c1;
            F32x3 c2 = m.c2;

            F32x3 t0 = new F32x3(c1.x, c2.x, c0.x);
            F32x3 t1 = new F32x3(c1.y, c2.y, c0.y);
            F32x3 t2 = new F32x3(c1.z, c2.z, c0.z);

            F32x3 m0 = t1 * t2.yzx - t1.yzx * t2;
            F32x3 m1 = t0.yzx * t2 - t0 * t2.yzx;
            F32x3 m2 = t0 * t1.yzx - t0.yzx * t1;

            float rcpDet = 1.0f / csum(t0.zxy * m0);
            return new F32x3x3(m0, m1, m2) * rcpDet;
        }

        /// <summary>Returns the determinant of a F32x3x3 matrix.</summary>
        /// <param name="m">Matrix to use when computing determinant.</param>
        /// <returns>The determinant of the matrix.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float determinant(F32x3x3 m)
        {
            F32x3 c0 = m.c0;
            F32x3 c1 = m.c1;
            F32x3 c2 = m.c2;

            float m00 = c1.y * c2.z - c1.z * c2.y;
            float m01 = c0.y * c2.z - c0.z * c2.y;
            float m02 = c0.y * c1.z - c0.z * c1.y;

            return c0.x * m00 - c1.x * m01 + c2.x * m02;
        }

        /// <summary>Returns a uint hash code of a F32x3x3 matrix.</summary>
        /// <param name="v">Matrix value to hash.</param>
        /// <returns>uint hash of the argument.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(F32x3x3 v)
        {
            return csum(x:
                AsU32(v.c0) * new U32x3(0x713BD06Fu, 0x753AD6ADu, 0xD19764C7u) +
                AsU32(v.c1) * new U32x3(0xB5D0BF63u, 0xF9102C5Fu, 0x9881FB9Fu) +
                AsU32(v.c2) * new U32x3(0x56A1530Du, 0x804B722Du, 0x738E50E5u)) + 0x4FC93C25u;
        }

        /// <summary>
        /// Returns a U32x3 vector hash code of a F32x3x3 matrix.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        /// <param name="v">Matrix value to hash.</param>
        /// <returns>U32x3 hash of the argument.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static U32x3 hashwide(F32x3x3 v)
        {
            return (AsU32(v.c0) * new U32x3(0xCD0445A5u, 0xD2B90D9Bu, 0xD35C9B2Du) +
                    AsU32(v.c1) * new U32x3(0xA10D9E27u, 0x568DAAA9u, 0x7530254Fu) +
                    AsU32(v.c2) * new U32x3(0x9F090439u, 0x5E9F85C9u, 0x8C4CA03Fu)) + 0xB8D969EDu;
        }

    }
}
