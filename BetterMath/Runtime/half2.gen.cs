//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using System.Diagnostics;
using Unity.IL2CPP.CompilerServices;

using F32 = System.Single;
using F64 = System.Double;

#pragma warning disable 0660, 0661

namespace CGTK.Utilities.BetterMath
{
    /// <summary>A 2 component vector of halfs.</summary>
    [DebuggerTypeProxy(typeof(F16x2.DebuggerProxy))]
    [System.Serializable]
    [Il2CppEagerStaticClassConstruction]
    public partial struct F16x2 : System.IEquatable<F16x2>, IFormattable
    {
        /// <summary>x component of the vector.</summary>
        public F16 x;
        /// <summary>y component of the vector.</summary>
        public F16 y;

        /// <summary>F16x2 zero value.</summary>
        public static readonly F16x2 zero;

        /// <summary>Constructs a F16x2 vector from two F16 values.</summary>
        /// <param name="x">The constructed vector's x component will be set to this value.</param>
        /// <param name="y">The constructed vector's y component will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F16x2(F16 x, F16 y)
        {
            this.x = x;
            this.y = y;
        }

        /// <summary>Constructs a F16x2 vector from a F16x2 vector.</summary>
        /// <param name="xy">The constructed vector's xy components will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F16x2(F16x2 xy)
        {
            this.x = xy.x;
            this.y = xy.y;
        }

        /// <summary>Constructs a F16x2 vector from a single F16 value by assigning it to every component.</summary>
        /// <param name="v">F16 to convert to F16x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F16x2(F16 v)
        {
            this.x = v;
            this.y = v;
        }

        /// <summary>Constructs a F16x2 vector from a single float value by converting it to F16 and assigning it to every component.</summary>
        /// <param name="v">float to convert to F16x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F16x2(float v)
        {
            this.x = (F16)v;
            this.y = (F16)v;
        }

        /// <summary>Constructs a F16x2 vector from a F32x2 vector by componentwise conversion.</summary>
        /// <param name="v">F32x2 to convert to F16x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F16x2(F32x2 v)
        {
            this.x = (F16)v.x;
            this.y = (F16)v.y;
        }

        /// <summary>Constructs a F16x2 vector from a single double value by converting it to F16 and assigning it to every component.</summary>
        /// <param name="v">double to convert to F16x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F16x2(double v)
        {
            this.x = (F16)v;
            this.y = (F16)v;
        }

        /// <summary>Constructs a F16x2 vector from a F64x2 vector by componentwise conversion.</summary>
        /// <param name="v">F64x2 to convert to F16x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F16x2(F64x2 v)
        {
            this.x = (F16)v.x;
            this.y = (F16)v.y;
        }


        /// <summary>Implicitly converts a single F16 value to a F16x2 vector by assigning it to every component.</summary>
        /// <param name="v">F16 to convert to F16x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F16x2(F16 v) { return new F16x2(v); }

        /// <summary>Explicitly converts a single float value to a F16x2 vector by converting it to F16 and assigning it to every component.</summary>
        /// <param name="v">float to convert to F16x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator F16x2(float v) { return new F16x2(v); }

        /// <summary>Explicitly converts a F32x2 vector to a F16x2 vector by componentwise conversion.</summary>
        /// <param name="v">F32x2 to convert to F16x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator F16x2(F32x2 v) { return new F16x2(v); }

        /// <summary>Explicitly converts a single double value to a F16x2 vector by converting it to F16 and assigning it to every component.</summary>
        /// <param name="v">double to convert to F16x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator F16x2(double v) { return new F16x2(v); }

        /// <summary>Explicitly converts a F64x2 vector to a F16x2 vector by componentwise conversion.</summary>
        /// <param name="v">F64x2 to convert to F16x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator F16x2(F64x2 v) { return new F16x2(v); }


        /// <summary>Returns the result of a componentwise equality operation on two F16x2 vectors.</summary>
        /// <param name="lhs">Left hand side F16x2 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side F16x2 to use to compute componentwise equality.</param>
        /// <returns>Boolx2 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator == (F16x2 lhs, F16x2 rhs) { return new Boolx2 (lhs.x == rhs.x, lhs.y == rhs.y); }

        /// <summary>Returns the result of a componentwise equality operation on a F16x2 vector and a F16 value.</summary>
        /// <param name="lhs">Left hand side F16x2 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side F16 to use to compute componentwise equality.</param>
        /// <returns>Boolx2 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator == (F16x2 lhs, F16 rhs) { return new Boolx2 (lhs.x == rhs, lhs.y == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a F16 value and a F16x2 vector.</summary>
        /// <param name="lhs">Left hand side F16 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side F16x2 to use to compute componentwise equality.</param>
        /// <returns>Boolx2 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator == (F16 lhs, F16x2 rhs) { return new Boolx2 (lhs == rhs.x, lhs == rhs.y); }


        /// <summary>Returns the result of a componentwise not equal operation on two F16x2 vectors.</summary>
        /// <param name="lhs">Left hand side F16x2 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side F16x2 to use to compute componentwise not equal.</param>
        /// <returns>Boolx2 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator != (F16x2 lhs, F16x2 rhs) { return new Boolx2 (lhs.x != rhs.x, lhs.y != rhs.y); }

        /// <summary>Returns the result of a componentwise not equal operation on a F16x2 vector and a F16 value.</summary>
        /// <param name="lhs">Left hand side F16x2 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side F16 to use to compute componentwise not equal.</param>
        /// <returns>Boolx2 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator != (F16x2 lhs, F16 rhs) { return new Boolx2 (lhs.x != rhs, lhs.y != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a F16 value and a F16x2 vector.</summary>
        /// <param name="lhs">Left hand side F16 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side F16x2 to use to compute componentwise not equal.</param>
        /// <returns>Boolx2 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator != (F16 lhs, F16x2 rhs) { return new Boolx2 (lhs != rhs.x, lhs != rhs.y); }




        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 xxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(x, x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 xxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(x, x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 xxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(x, x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 xxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(x, x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 xyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(x, y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 xyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(x, y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 xyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(x, y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 xyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(x, y, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 yxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(y, x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 yxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(y, x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 yxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(y, x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 yxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(y, x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 yyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(y, y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 yyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(y, y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 yyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(y, y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x4 yyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x4(y, y, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x3 xxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x3(x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x3 xxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x3(x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x3 xyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x3(x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x3 xyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x3(x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x3 yxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x3(y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x3 yxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x3(y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x3 yyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x3(y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x3 yyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x3(y, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x2 xx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x2(x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x2 xy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x2(x, y); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { x = value.x; y = value.y; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x2 yx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x2(y, x); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { y = value.x; x = value.y; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F16x2 yy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F16x2(y, y); }
        }



        /// <summary>Returns the F16 element at a specified index.</summary>
        unsafe public F16 this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (F16x2* array = &this) { return ((F16*)array)[index]; }
            }
            set
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (F16* array = &x) { array[index] = value; }
            }
        }

        /// <summary>Returns true if the F16x2 is equal to a given F16x2, false otherwise.</summary>
        /// <param name="rhs">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(F16x2 rhs) { return x == rhs.x && y == rhs.y; }

        /// <summary>Returns true if the F16x2 is equal to a given F16x2, false otherwise.</summary>
        /// <param name="o">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        public override bool Equals(object o) { return o is F16x2 converted && Equals(converted); }


        /// <summary>Returns a hash code for the F16x2.</summary>
        /// <returns>The computed hash code.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() { return (int)Maths.hash(this); }


        /// <summary>Returns a string representation of the F16x2.</summary>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("F16x2({0}, {1})", x, y);
        }

        /// <summary>Returns a string representation of the F16x2 using a specified format and culture-specific format information.</summary>
        /// <param name="format">Format string to use during string formatting.</param>
        /// <param name="formatProvider">Format provider to use during string formatting.</param>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("F16x2({0}, {1})", x.ToString(format, formatProvider), y.ToString(format, formatProvider));
        }

        internal sealed class DebuggerProxy
        {
            public F16 x;
            public F16 y;
            public DebuggerProxy(F16x2 v)
            {
                x = v.x;
                y = v.y;
            }
        }

    }

    public static partial class Maths
    {
        /*
        /// <summary>Returns a F16x2 vector constructed from two F16 values.</summary>
        /// <param name="x">The constructed vector's x component will be set to this value.</param>
        /// <param name="y">The constructed vector's y component will be set to this value.</param>
        /// <returns>F16x2 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F16x2 half2(F16 x, F16 y) { return new F16x2(x, y); }

        /// <summary>Returns a F16x2 vector constructed from a F16x2 vector.</summary>
        /// <param name="xy">The constructed vector's xy components will be set to this value.</param>
        /// <returns>F16x2 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F16x2 half2(F16x2 xy) { return new F16x2(xy); }

        /// <summary>Returns a F16x2 vector constructed from a single F16 value by assigning it to every component.</summary>
        /// <param name="v">F16 to convert to F16x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F16x2 half2(F16 v) { return new F16x2(v); }

        /// <summary>Returns a F16x2 vector constructed from a single float value by converting it to F16 and assigning it to every component.</summary>
        /// <param name="v">float to convert to F16x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F16x2 half2(float v) { return new F16x2(v); }

        /// <summary>Return a F16x2 vector constructed from a F32x2 vector by componentwise conversion.</summary>
        /// <param name="v">F32x2 to convert to F16x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F16x2 half2(F32x2 v) { return new F16x2(v); }

        /// <summary>Returns a F16x2 vector constructed from a single double value by converting it to F16 and assigning it to every component.</summary>
        /// <param name="v">double to convert to F16x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F16x2 half2(double v) { return new F16x2(v); }

        /// <summary>Return a F16x2 vector constructed from a F64x2 vector by componentwise conversion.</summary>
        /// <param name="v">F64x2 to convert to F16x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F16x2 half2(F64x2 v) { return new F16x2(v); }
        */

        /// <summary>Returns a uint hash code of a F16x2 vector.</summary>
        /// <param name="v">Vector value to hash.</param>
        /// <returns>uint hash of the argument.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(F16x2 v)
        {
            return csum(new U32x2(v.x.value, v.y.value) * new U32x2(0x6E624EB7u, 0x7383ED49u)) + 0xDD49C23Bu;
        }

        /// <summary>
        /// Returns a U32x2 vector hash code of a F16x2 vector.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        /// <param name="v">Vector value to hash.</param>
        /// <returns>U32x2 hash of the argument.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static U32x2 hashwide(F16x2 v)
        {
            return (new U32x2(v.x.value, v.y.value) * new U32x2(0xEBD0D005u, 0x91475DF7u)) + 0x55E84827u;
        }

    }
}
