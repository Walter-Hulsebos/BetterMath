//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using System.Diagnostics;
using Unity.IL2CPP.CompilerServices;

#pragma warning disable 0660, 0661

namespace CGTK.Utilities.BetterMath
{
    /// <summary>A 2 component vector of floats.</summary>
    [DebuggerTypeProxy(typeof(F32x2.DebuggerProxy))]
    [Serializable]
    [Il2CppEagerStaticClassConstruction]
    public partial struct F32x2 : IEquatable<F32x2>, IFormattable
    {
        /// <summary>x component of the vector.</summary>
        public float x;
        /// <summary>y component of the vector.</summary>
        public float y;

        /// <summary>F32x2 zero value.</summary>
        public static readonly F32x2 zero;

        /// <summary>Constructs a F32x2 vector from two float values.</summary>
        /// <param name="x">The constructed vector's x component will be set to this value.</param>
        /// <param name="y">The constructed vector's y component will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(float x = 0, float y = 0)
        {
            this.x = x;
            this.y = y;
        }

        /// <summary>Constructs a F32x2 vector from a F32x2 vector.</summary>
        /// <param name="xy">The constructed vector's xy components will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(F32x2 xy)
        {
            this.x = xy.x;
            this.y = xy.y;
        }

        /// <summary>Constructs a F32x2 vector from a single float value by assigning it to every component.</summary>
        /// <param name="scalar">float to convert to F32x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(float scalar)
        {
            this.x = scalar;
            this.y = scalar;
        }

        /// <summary>Constructs a F32x2 vector from a single bool value by converting it to float and assigning it to every component.</summary>
        /// <param name="v">bool to convert to F32x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(bool v)
        {
            this.x = v ? 1.0f : 0.0f;
            this.y = v ? 1.0f : 0.0f;
        }

        /// <summary>Constructs a F32x2 vector from a Boolx2 vector by componentwise conversion.</summary>
        /// <param name="v">Boolx2 to convert to F32x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(Boolx2 v)
        {
            this.x = v.x ? 1.0f : 0.0f;
            this.y = v.y ? 1.0f : 0.0f;
        }

        /// <summary>Constructs a F32x2 vector from a single int value by converting it to float and assigning it to every component.</summary>
        /// <param name="scalar">int to convert to F32x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(int scalar)
        {
            this.x = scalar;
            this.y = scalar;
        }

        /// <summary>Constructs a F32x2 vector from a I32x2 vector by componentwise conversion.</summary>
        /// <param name="v">I32x2 to convert to F32x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(I32x2 v)
        {
            this.x = v.x;
            this.y = v.y;
        }

        /// <summary>Constructs a F32x2 vector from a single uint value by converting it to float and assigning it to every component.</summary>
        /// <param name="v">uint to convert to F32x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(uint v)
        {
            this.x = v;
            this.y = v;
        }

        /// <summary>Constructs a F32x2 vector from a U32x2 vector by componentwise conversion.</summary>
        /// <param name="v">U32x2 to convert to F32x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(U32x2 v)
        {
            this.x = v.x;
            this.y = v.y;
        }

        /// <summary>Constructs a F32x2 vector from a single F16 value by converting it to float and assigning it to every component.</summary>
        /// <param name="v">F16 to convert to F32x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(F16 v)
        {
            this.x = v;
            this.y = v;
        }

        /// <summary>Constructs a F32x2 vector from a F16x2 vector by componentwise conversion.</summary>
        /// <param name="v">F16x2 to convert to F32x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(F16x2 v)
        {
            this.x = v.x;
            this.y = v.y;
        }

        /// <summary>Constructs a F32x2 vector from a single double value by converting it to float and assigning it to every component.</summary>
        /// <param name="v">double to convert to F32x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(double v)
        {
            this.x = (float)v;
            this.y = (float)v;
        }

        /// <summary>Constructs a F32x2 vector from a F64x2 vector by componentwise conversion.</summary>
        /// <param name="v">F64x2 to convert to F32x2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public F32x2(F64x2 v)
        {
            this.x = (float)v.x;
            this.y = (float)v.y;
        }


        /// <summary>Implicitly converts a single float value to a F32x2 vector by assigning it to every component.</summary>
        /// <param name="v">float to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F32x2(float v) { return new F32x2(v); }

        /// <summary>Explicitly converts a single bool value to a F32x2 vector by converting it to float and assigning it to every component.</summary>
        /// <param name="v">bool to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator F32x2(bool v) { return new F32x2(v); }

        /// <summary>Explicitly converts a Boolx2 vector to a F32x2 vector by componentwise conversion.</summary>
        /// <param name="v">Boolx2 to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator F32x2(Boolx2 v) { return new F32x2(v); }

        /// <summary>Implicitly converts a single int value to a F32x2 vector by converting it to float and assigning it to every component.</summary>
        /// <param name="v">int to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F32x2(int v) { return new F32x2(v); }

        /// <summary>Implicitly converts a I32x2 vector to a F32x2 vector by componentwise conversion.</summary>
        /// <param name="v">I32x2 to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F32x2(I32x2 v) { return new F32x2(v); }

        /// <summary>Implicitly converts a single uint value to a F32x2 vector by converting it to float and assigning it to every component.</summary>
        /// <param name="v">uint to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F32x2(uint v) { return new F32x2(v); }

        /// <summary>Implicitly converts a U32x2 vector to a F32x2 vector by componentwise conversion.</summary>
        /// <param name="v">U32x2 to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F32x2(U32x2 v) { return new F32x2(v); }

        /// <summary>Implicitly converts a single F16 value to a F32x2 vector by converting it to float and assigning it to every component.</summary>
        /// <param name="v">F16 to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F32x2(F16 v) { return new F32x2(v); }

        /// <summary>Implicitly converts a F16x2 vector to a F32x2 vector by componentwise conversion.</summary>
        /// <param name="v">F16x2 to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator F32x2(F16x2 v) { return new F32x2(v); }

        /// <summary>Explicitly converts a single double value to a F32x2 vector by converting it to float and assigning it to every component.</summary>
        /// <param name="v">double to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator F32x2(double v) { return new F32x2(v); }

        /// <summary>Explicitly converts a F64x2 vector to a F32x2 vector by componentwise conversion.</summary>
        /// <param name="v">F64x2 to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator F32x2(F64x2 v) { return new F32x2(v); }


        /// <summary>Returns the result of a componentwise multiplication operation on two F32x2 vectors.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise multiplication.</param>
        /// <returns>F32x2 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator * (F32x2 lhs, F32x2 rhs) { return new F32x2 (lhs.x * rhs.x, lhs.y * rhs.y); }

        /// <summary>Returns the result of a componentwise multiplication operation on a F32x2 vector and a float value.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise multiplication.</param>
        /// <returns>F32x2 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator * (F32x2 lhs, float rhs) { return new F32x2 (lhs.x * rhs, lhs.y * rhs); }

        /// <summary>Returns the result of a componentwise multiplication operation on a float value and a F32x2 vector.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise multiplication.</param>
        /// <returns>F32x2 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator * (float lhs, F32x2 rhs) { return new F32x2 (lhs * rhs.x, lhs * rhs.y); }


        /// <summary>Returns the result of a componentwise addition operation on two F32x2 vectors.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise addition.</param>
        /// <returns>F32x2 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator + (F32x2 lhs, F32x2 rhs) { return new F32x2 (lhs.x + rhs.x, lhs.y + rhs.y); }

        /// <summary>Returns the result of a componentwise addition operation on a F32x2 vector and a float value.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise addition.</param>
        /// <returns>F32x2 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator + (F32x2 lhs, float rhs) { return new F32x2 (lhs.x + rhs, lhs.y + rhs); }

        /// <summary>Returns the result of a componentwise addition operation on a float value and a F32x2 vector.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise addition.</param>
        /// <returns>F32x2 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator + (float lhs, F32x2 rhs) { return new F32x2 (lhs + rhs.x, lhs + rhs.y); }


        /// <summary>Returns the result of a componentwise subtraction operation on two F32x2 vectors.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise subtraction.</param>
        /// <returns>F32x2 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator - (F32x2 lhs, F32x2 rhs) { return new F32x2 (lhs.x - rhs.x, lhs.y - rhs.y); }

        /// <summary>Returns the result of a componentwise subtraction operation on a F32x2 vector and a float value.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise subtraction.</param>
        /// <returns>F32x2 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator - (F32x2 lhs, float rhs) { return new F32x2 (lhs.x - rhs, lhs.y - rhs); }

        /// <summary>Returns the result of a componentwise subtraction operation on a float value and a F32x2 vector.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise subtraction.</param>
        /// <returns>F32x2 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator - (float lhs, F32x2 rhs) { return new F32x2 (lhs - rhs.x, lhs - rhs.y); }


        /// <summary>Returns the result of a componentwise division operation on two F32x2 vectors.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise division.</param>
        /// <returns>F32x2 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator / (F32x2 lhs, F32x2 rhs) { return new F32x2 (lhs.x / rhs.x, lhs.y / rhs.y); }

        /// <summary>Returns the result of a componentwise division operation on a F32x2 vector and a float value.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise division.</param>
        /// <returns>F32x2 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator / (F32x2 lhs, float rhs) { return new F32x2 (lhs.x / rhs, lhs.y / rhs); }

        /// <summary>Returns the result of a componentwise division operation on a float value and a F32x2 vector.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise division.</param>
        /// <returns>F32x2 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator / (float lhs, F32x2 rhs) { return new F32x2 (lhs / rhs.x, lhs / rhs.y); }


        /// <summary>Returns the result of a componentwise modulus operation on two F32x2 vectors.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise modulus.</param>
        /// <returns>F32x2 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator % (F32x2 lhs, F32x2 rhs) { return new F32x2 (lhs.x % rhs.x, lhs.y % rhs.y); }

        /// <summary>Returns the result of a componentwise modulus operation on a F32x2 vector and a float value.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise modulus.</param>
        /// <returns>F32x2 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator % (F32x2 lhs, float rhs) { return new F32x2 (lhs.x % rhs, lhs.y % rhs); }

        /// <summary>Returns the result of a componentwise modulus operation on a float value and a F32x2 vector.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise modulus.</param>
        /// <returns>F32x2 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator % (float lhs, F32x2 rhs) { return new F32x2 (lhs % rhs.x, lhs % rhs.y); }


        /// <summary>Returns the result of a componentwise increment operation on a F32x2 vector.</summary>
        /// <param name="val">Value to use when computing the componentwise increment.</param>
        /// <returns>F32x2 result of the componentwise increment.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator ++ (F32x2 val) { return new F32x2 (++val.x, ++val.y); }


        /// <summary>Returns the result of a componentwise decrement operation on a F32x2 vector.</summary>
        /// <param name="val">Value to use when computing the componentwise decrement.</param>
        /// <returns>F32x2 result of the componentwise decrement.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator -- (F32x2 val) { return new F32x2 (--val.x, --val.y); }


        /// <summary>Returns the result of a componentwise less than operation on two F32x2 vectors.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise less than.</param>
        /// <returns>Boolx2 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator < (F32x2 lhs, F32x2 rhs) { return new Boolx2 (lhs.x < rhs.x, lhs.y < rhs.y); }

        /// <summary>Returns the result of a componentwise less than operation on a F32x2 vector and a float value.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise less than.</param>
        /// <returns>Boolx2 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator < (F32x2 lhs, float rhs) { return new Boolx2 (lhs.x < rhs, lhs.y < rhs); }

        /// <summary>Returns the result of a componentwise less than operation on a float value and a F32x2 vector.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise less than.</param>
        /// <returns>Boolx2 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator < (float lhs, F32x2 rhs) { return new Boolx2 (lhs < rhs.x, lhs < rhs.y); }


        /// <summary>Returns the result of a componentwise less or equal operation on two F32x2 vectors.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise less or equal.</param>
        /// <returns>Boolx2 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator <= (F32x2 lhs, F32x2 rhs) { return new Boolx2 (lhs.x <= rhs.x, lhs.y <= rhs.y); }

        /// <summary>Returns the result of a componentwise less or equal operation on a F32x2 vector and a float value.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise less or equal.</param>
        /// <returns>Boolx2 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator <= (F32x2 lhs, float rhs) { return new Boolx2 (lhs.x <= rhs, lhs.y <= rhs); }

        /// <summary>Returns the result of a componentwise less or equal operation on a float value and a F32x2 vector.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise less or equal.</param>
        /// <returns>Boolx2 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator <= (float lhs, F32x2 rhs) { return new Boolx2 (lhs <= rhs.x, lhs <= rhs.y); }


        /// <summary>Returns the result of a componentwise greater than operation on two F32x2 vectors.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise greater than.</param>
        /// <returns>Boolx2 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator > (F32x2 lhs, F32x2 rhs) { return new Boolx2 (lhs.x > rhs.x, lhs.y > rhs.y); }

        /// <summary>Returns the result of a componentwise greater than operation on a F32x2 vector and a float value.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise greater than.</param>
        /// <returns>Boolx2 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator > (F32x2 lhs, float rhs) { return new Boolx2 (lhs.x > rhs, lhs.y > rhs); }

        /// <summary>Returns the result of a componentwise greater than operation on a float value and a F32x2 vector.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise greater than.</param>
        /// <returns>Boolx2 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator > (float lhs, F32x2 rhs) { return new Boolx2 (lhs > rhs.x, lhs > rhs.y); }


        /// <summary>Returns the result of a componentwise greater or equal operation on two F32x2 vectors.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise greater or equal.</param>
        /// <returns>Boolx2 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator >= (F32x2 lhs, F32x2 rhs) { return new Boolx2 (lhs.x >= rhs.x, lhs.y >= rhs.y); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a F32x2 vector and a float value.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise greater or equal.</param>
        /// <returns>Boolx2 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator >= (F32x2 lhs, float rhs) { return new Boolx2 (lhs.x >= rhs, lhs.y >= rhs); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a float value and a F32x2 vector.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise greater or equal.</param>
        /// <returns>Boolx2 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator >= (float lhs, F32x2 rhs) { return new Boolx2 (lhs >= rhs.x, lhs >= rhs.y); }


        /// <summary>Returns the result of a componentwise unary minus operation on a F32x2 vector.</summary>
        /// <param name="val">Value to use when computing the componentwise unary minus.</param>
        /// <returns>F32x2 result of the componentwise unary minus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator - (F32x2 val) { return new F32x2 (-val.x, -val.y); }


        /// <summary>Returns the result of a componentwise unary plus operation on a F32x2 vector.</summary>
        /// <param name="val">Value to use when computing the componentwise unary plus.</param>
        /// <returns>F32x2 result of the componentwise unary plus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 operator + (F32x2 val) { return new F32x2 (+val.x, +val.y); }


        /// <summary>Returns the result of a componentwise equality operation on two F32x2 vectors.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise equality.</param>
        /// <returns>Boolx2 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator == (F32x2 lhs, F32x2 rhs) { return new Boolx2 (lhs.x == rhs.x, lhs.y == rhs.y); }

        /// <summary>Returns the result of a componentwise equality operation on a F32x2 vector and a float value.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise equality.</param>
        /// <returns>Boolx2 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator == (F32x2 lhs, float rhs) { return new Boolx2 (lhs.x == rhs, lhs.y == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a float value and a F32x2 vector.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise equality.</param>
        /// <returns>Boolx2 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator == (float lhs, F32x2 rhs) { return new Boolx2 (lhs == rhs.x, lhs == rhs.y); }


        /// <summary>Returns the result of a componentwise not equal operation on two F32x2 vectors.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise not equal.</param>
        /// <returns>Boolx2 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator != (F32x2 lhs, F32x2 rhs) { return new Boolx2 (lhs.x != rhs.x, lhs.y != rhs.y); }

        /// <summary>Returns the result of a componentwise not equal operation on a F32x2 vector and a float value.</summary>
        /// <param name="lhs">Left hand side F32x2 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side float to use to compute componentwise not equal.</param>
        /// <returns>Boolx2 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator != (F32x2 lhs, float rhs) { return new Boolx2 (lhs.x != rhs, lhs.y != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a float value and a F32x2 vector.</summary>
        /// <param name="lhs">Left hand side float to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side F32x2 to use to compute componentwise not equal.</param>
        /// <returns>Boolx2 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boolx2 operator != (float lhs, F32x2 rhs) { return new Boolx2 (lhs != rhs.x, lhs != rhs.y); }




        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 xxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(x, x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 xxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(x, x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 xxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(x, x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 xxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(x, x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 xyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(x, y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 xyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(x, y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 xyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(x, y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 xyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(x, y, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 yxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(y, x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 yxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(y, x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 yxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(y, x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 yxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(y, x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 yyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(y, y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 yyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(y, y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 yyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(y, y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x4 yyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x4(y, y, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 xxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x3(x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 xxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x3(x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 xyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x3(x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 xyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x3(x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 yxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x3(y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 yxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x3(y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 yyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x3(y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 yyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x3(y, y, y); }
        }

        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 _xx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new F32x3(0, x, x);
        }

        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 _xy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new F32x3(0, x, y);
        }

        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 _yy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new F32x3(0, y, y);
        }

        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 _yx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new F32x3(0, y, x);
        }

        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x3 x_y
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new F32x3(x, 0, y);
        }

        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x2 xx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x2(x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x2 xy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x2(x, y); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { x = value.x; y = value.y; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x2 yx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x2(y, x); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { y = value.x; x = value.y; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public F32x2 yy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new F32x2(y, y); }
        }



        /// <summary>Returns the float element at a specified index.</summary>
        unsafe public float this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (F32x2* array = &this) { return ((float*)array)[index]; }
            }
            set
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (float* array = &x) { array[index] = value; }
            }
        }

        /// <summary>Returns true if the F32x2 is equal to a given F32x2, false otherwise.</summary>
        /// <param name="rhs">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(F32x2 rhs) { return x == rhs.x && y == rhs.y; }

        /// <summary>Returns true if the F32x2 is equal to a given F32x2, false otherwise.</summary>
        /// <param name="o">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        public override bool Equals(object o) { return o is F32x2 converted && Equals(converted); }


        /// <summary>Returns a hash code for the F32x2.</summary>
        /// <returns>The computed hash code.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() { return (int)Maths.hash(this); }


        /// <summary>Returns a string representation of the F32x2.</summary>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("F32x2({0}f, {1}f)", x, y);
        }

        /// <summary>Returns a string representation of the F32x2 using a specified format and culture-specific format information.</summary>
        /// <param name="format">Format string to use during string formatting.</param>
        /// <param name="formatProvider">Format provider to use during string formatting.</param>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("F32x2({0}f, {1}f)", x.ToString(format, formatProvider), y.ToString(format, formatProvider));
        }

        internal sealed class DebuggerProxy
        {
            public float x;
            public float y;
            public DebuggerProxy(F32x2 v)
            {
                x = v.x;
                y = v.y;
            }
        }

    }

    public static partial class Maths
    {
        /*
        /// <summary>Returns a F32x2 vector constructed from two float values.</summary>
        /// <param name="x">The constructed vector's x component will be set to this value.</param>
        /// <param name="y">The constructed vector's y component will be set to this value.</param>
        /// <returns>F32x2 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(float x, float y) { return new F32x2(x, y); }

        /// <summary>Returns a F32x2 vector constructed from a F32x2 vector.</summary>
        /// <param name="xy">The constructed vector's xy components will be set to this value.</param>
        /// <returns>F32x2 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(F32x2 xy) { return new F32x2(xy); }

        /// <summary>Returns a F32x2 vector constructed from a single float value by assigning it to every component.</summary>
        /// <param name="scalar">float to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(float scalar) { return new F32x2(scalar); }

        /// <summary>Returns a F32x2 vector constructed from a single bool value by converting it to float and assigning it to every component.</summary>
        /// <param name="scalar">bool to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(bool scalar) { return new F32x2(scalar); }

        /// <summary>Return a F32x2 vector constructed from a Boolx2 vector by componentwise conversion.</summary>
        /// <param name="scalar">Boolx2 to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(Boolx2 scalar) { return new F32x2(scalar); }

        /// <summary>Returns a F32x2 vector constructed from a single int value by converting it to float and assigning it to every component.</summary>
        /// <param name="scalar">int to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(int scalar) { return new F32x2(scalar); }

        /// <summary>Return a F32x2 vector constructed from a I32x2 vector by componentwise conversion.</summary>
        /// <param name="scalar">I32x2 to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(I32x2 scalar) { return new F32x2(scalar); }

        /// <summary>Returns a F32x2 vector constructed from a single uint value by converting it to float and assigning it to every component.</summary>
        /// <param name="scalar">uint to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(uint scalar) { return new F32x2(scalar); }

        /// <summary>Return a F32x2 vector constructed from a U32x2 vector by componentwise conversion.</summary>
        /// <param name="scalar">U32x2 to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(U32x2 scalar) { return new F32x2(scalar); }

        /// <summary>Returns a F32x2 vector constructed from a single F16 value by converting it to float and assigning it to every component.</summary>
        /// <param name="scalar">F16 to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(F16 scalar) { return new F32x2(scalar); }

        /// <summary>Return a F32x2 vector constructed from a F16x2 vector by componentwise conversion.</summary>
        /// <param name="scalar">F16x2 to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(F16x2 scalar) { return new F32x2(scalar); }

        /// <summary>Returns a F32x2 vector constructed from a single double value by converting it to float and assigning it to every component.</summary>
        /// <param name="scalar">double to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(double scalar) { return new F32x2(scalar); }

        /// <summary>Return a F32x2 vector constructed from a F64x2 vector by componentwise conversion.</summary>
        /// <param name="scalar">F64x2 to convert to F32x2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 new F32x2(F64x2 scalar) { return new F32x2(scalar); }
        */

        /// <summary>Returns a uint hash code of a F32x2 vector.</summary>
        /// <param name="v">Vector value to hash.</param>
        /// <returns>uint hash of the argument.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(F32x2 v)
        {
            return csum(AsU32(v) * new U32x2(0xFA3A3285u, 0xAD55999Du)) + 0xDCDD5341u;
        }

        /// <summary>
        /// Returns a U32x2 vector hash code of a F32x2 vector.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        /// <param name="v">Vector value to hash.</param>
        /// <returns>U32x2 hash of the argument.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static U32x2 hashwide(F32x2 v)
        {
            return (AsU32(v) * new U32x2(0x94DDD769u, 0xA1E92D39u)) + 0x4583C801u;
        }

        /// <summary>Returns the result of specified shuffling of the components from two F32x2 vectors into a float value.</summary>
        /// <param name="left">F32x2 to use as the left argument of the shuffle operation.</param>
        /// <param name="right">F32x2 to use as the right argument of the shuffle operation.</param>
        /// <param name="x">The ShuffleComponent to use when setting the resulting float.</param>
        /// <returns>float result of the shuffle operation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float shuffle(F32x2 left, F32x2 right, ShuffleComponent x)
        {
            return select_shuffle_component(left, right, x);
        }

        /// <summary>Returns the result of specified shuffling of the components from two F32x2 vectors into a F32x2 vector.</summary>
        /// <param name="left">F32x2 to use as the left argument of the shuffle operation.</param>
        /// <param name="right">F32x2 to use as the right argument of the shuffle operation.</param>
        /// <param name="x">The ShuffleComponent to use when setting the resulting F32x2 x component.</param>
        /// <param name="y">The ShuffleComponent to use when setting the resulting F32x2 y component.</param>
        /// <returns>F32x2 result of the shuffle operation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x2 shuffle(F32x2 left, F32x2 right, ShuffleComponent x, ShuffleComponent y)
        {
            return new F32x2(
                select_shuffle_component(left, right, x),
                select_shuffle_component(left, right, y));
        }

        /// <summary>Returns the result of specified shuffling of the components from two F32x2 vectors into a F32x3 vector.</summary>
        /// <param name="left">F32x2 to use as the left argument of the shuffle operation.</param>
        /// <param name="right">F32x2 to use as the right argument of the shuffle operation.</param>
        /// <param name="x">The ShuffleComponent to use when setting the resulting F32x3 x component.</param>
        /// <param name="y">The ShuffleComponent to use when setting the resulting F32x3 y component.</param>
        /// <param name="z">The ShuffleComponent to use when setting the resulting F32x3 z component.</param>
        /// <returns>F32x3 result of the shuffle operation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x3 shuffle(F32x2 left, F32x2 right, ShuffleComponent x, ShuffleComponent y, ShuffleComponent z)
        {
            return new F32x3(
                select_shuffle_component(left, right, x),
                select_shuffle_component(left, right, y),
                select_shuffle_component(left, right, z));
        }

        /// <summary>Returns the result of specified shuffling of the components from two F32x2 vectors into a F32x4 vector.</summary>
        /// <param name="left">F32x2 to use as the left argument of the shuffle operation.</param>
        /// <param name="right">F32x2 to use as the right argument of the shuffle operation.</param>
        /// <param name="x">The ShuffleComponent to use when setting the resulting F32x4 x component.</param>
        /// <param name="y">The ShuffleComponent to use when setting the resulting F32x4 y component.</param>
        /// <param name="z">The ShuffleComponent to use when setting the resulting F32x4 z component.</param>
        /// <param name="w">The ShuffleComponent to use when setting the resulting F32x4 w component.</param>
        /// <returns>F32x4 result of the shuffle operation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static F32x4 shuffle(F32x2 left, F32x2 right, ShuffleComponent x, ShuffleComponent y, ShuffleComponent z, ShuffleComponent w)
        {
            return new F32x4(
                select_shuffle_component(left, right, x),
                select_shuffle_component(left, right, y),
                select_shuffle_component(left, right, z),
                select_shuffle_component(left, right, w));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static float select_shuffle_component(F32x2 a, F32x2 b, ShuffleComponent component)
        {
            switch(component)
            {
                case ShuffleComponent.LeftX:
                    return a.x;
                case ShuffleComponent.LeftY:
                    return a.y;
                case ShuffleComponent.RightX:
                    return b.x;
                case ShuffleComponent.RightY:
                    return b.y;
                default:
                    throw new System.ArgumentException("Invalid shuffle component: " + component);
            }
        }

    }
}
